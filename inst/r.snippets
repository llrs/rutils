snippet lib
	library("${1:package}")

snippet req
	require("${1:package}")

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...})
		standardGeneric("${1:generic}")
	)

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet tt
	tar_target(${1:name}, ${2:code}),

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${0:name} <- function(${1:variables}) {
		${2:code}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet shinyapp
	library(shiny)

	ui <- fluidPage(
	  ${0}
	)

	server <- function(input, output, session) {

	}

	shinyApp(ui, server)

snippet shinymod
	${1:name}UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}

	${1:name}Server <- function(id) {
	  moduleServer(
	    id,
	    function(input, output, session) {

	    }
	  )
	}

snippet bioc
	[${1:package}](https://bioconductor.org/packages/${1:package})

snippet cran
	[${1:package}](https://cran.r-project.org/package=${1:package})

snippet github
	[${1:repo}](https://github.com/${1:repo})

snippet tt
	tar_target(${1:name}, ${2:code}),
